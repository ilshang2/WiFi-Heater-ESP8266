esphome:
  name: hwater  # 設定設備名稱為 hwater
  friendly_name: HWater  # 設定友好名稱為 HWater

esp8266:
  board: nodemcuv2  # 使用 ESP8266 的 nodemcuv2 開發板

logger:
  level: INFO  # 記錄器的日誌等級設定為 INFO

api:
  encryption:
    key: "7uoAmbYwHvWNQA3xCXsXaJWoQiAf3OJQb+6reWqCU8o="  # API 加密密鑰，用於安全通信

ota:
  platform: esphome  # 設定 OTA 平台為 esphome，用於遠程固件更新
  password: "ef6e1fd2688b16bda2ac563f214e8f16"  # OTA 更新的密碼

wifi:
  ssid: "ShangHome"  # 無線網路名稱 (SSID)
  password: "61389038"  # 無線網路密碼
  ap:
    ssid: "HWater Fallback Hotspot"  # Fallback 熱點名稱，當無法連接主 WiFi 時使用
    password: "12345678"  # 熱點密碼

web_server:
  port: 80  # 設定 Web 伺服器的連接埠為 80

globals:
  # 加熱器剩餘時間計時器，型態為整數，初始值為 0
  - id: heater_timer_remaining
    type: int
    restore_value: yes
    initial_value: '0'
  # 溫度滯後值，用於控制加熱器的啟停邏輯，型態為浮點數，初始值為 2.0
  - id: TEMPERATURE_HYSTERESIS
    type: float
    initial_value: '2.0'

time:
  # 使用 SNTP 獲取實時時間，設定時區為台北
  - platform: sntp
    id: sntp_time
    timezone: "Asia/Taipei"
    servers:
      - time.google.com
      - pool.ntp.org

sensor:
  # DHT11 感測器，用於監測環境溫度和濕度，連接到 GPIO4
  - platform: dht
    pin: GPIO4
    temperature:
      name: "04_Environment Temperature"
      id: env_temperature
      unit_of_measurement: "°C"
      accuracy_decimals: 1
    humidity:
      name: "05_Environment Humidity"
      id: env_humidity
      unit_of_measurement: "%"
      accuracy_decimals: 1
    model: DHT11
    update_interval: 10s  # 每 10 秒更新一次

  # DHT11 感測器，用於監測水溫，連接到 GPIO5
  - platform: dht
    pin: GPIO5
    temperature:
      name: "01_Water Temperature"
      id: calibrated_temperature
      unit_of_measurement: "°C"
      accuracy_decimals: 1
    humidity:
      name: "06_Heater Humidity"
      id: water_humidity
      unit_of_measurement: "%"
      accuracy_decimals: 1
    model: DHT11
    update_interval: 10s  # 每 10 秒更新一次

text_sensor:
  # 剩餘加熱時間顯示，格式為 mm:ss，每 10 秒更新一次
  - platform: template
    name: "11_Remaining Heating Time"
    id: heating_time_display
    update_interval: 10s
    lambda: |-
      if (id(heater_timer_remaining) > 0) {
        int minutes = id(heater_timer_remaining) / 60;
        int seconds = id(heater_timer_remaining) % 60;
        char str[12];
        snprintf(str, sizeof(str), "%02d:%02d", minutes, seconds);
        return {str};
      }
      return {"00:00"};

  # 顯示當前時間，每 60 秒更新一次
  - platform: template
    name: "13_Current Time"
    id: current_time_display
    update_interval: 60s
    lambda: |-
      auto now = id(sntp_time).now();
      if (now.is_valid()) {
        char str[16];
        snprintf(str, sizeof(str), "%02d:%02d:%02d", now.hour, now.minute, now.second);
        return {str};
      }
      return {"Invalid Time"};

  # 顯示加熱器的狀態（開/關），每 10 秒更新一次
  - platform: template
    name: "12_Water Heater Status"
    id: heater_status_display
    update_interval: 10s
    lambda: |-
      if (id(heater_switch).state) {
        return {"ON"};
      } else {
        return {"OFF"};
      }

switch:
  # 加熱器控制開關，使用 GPIO14，僅內部使用
  - platform: gpio
    name: "12_Water Heater"
    pin: GPIO14
    id: heater_switch
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true

  # 定時模式開關，用於啟用或禁用加熱器的定時模式
  - platform: template
    name: "07_Enable Timer Mode"
    id: timer_mode_switch
    turn_on_action:
      - script.execute: enable_timer_mode
      - lambda: |-
          id(timer_mode_switch).publish_state(true);
    turn_off_action:
      - script.execute: disable_timer_mode
      - lambda: |-
          id(timer_mode_switch).publish_state(false);
      - switch.turn_off: heater_switch
      - logger.log: "Timer mode disabled, Water Heater turned off."

  # 手動加熱觸發開關，用於手動啟動或停止加熱
  - platform: template
    name: "10_Manual Heater Trigger"
    id: manual_heater_switch
    turn_on_action:
      - script.execute: manual_heating_start
      - lambda: |-
          id(manual_heater_switch).publish_state(true);
    turn_off_action:
      - script.execute: manual_heating_stop
      - lambda: |-
          id(manual_heater_switch).publish_state(false);
      - switch.turn_off: heater_switch
      - globals.set:
          id: heater_timer_remaining
          value: '0'
      - logger.log: "Manual heater trigger turned off, Water Heater turned off, and Remaining Heating Time reset."

  # 自動目標溫度調整開關，用於啟用或禁用自動調整目標溫度
  - platform: template
    name: "02_Auto Target Temperature Adjustment"
    id: auto_target_temp_adjust
    icon: "mdi:autorenew"
    optimistic: true
    turn_on_action:
      - logger.log: "Automatic Target Temperature Adjustment enabled."
    turn_off_action:
      - logger.log: "Automatic Target Temperature Adjustment disabled."

number:
  # 目標水溫設定控制，用於設定加熱器的目標水溫
  - platform: template
    name: "03_Target Water Temperature"
    id: target_temperature
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    min_value: 15
    max_value: 60
    step: 1
    initial_value: 45
    set_action:
      - lambda: |-
          ESP_LOGD("main", "Target temperature set to %.1f °C", x);
          id(target_temperature).publish_state(x);
          float target = x;
          float hysteresis = id(TEMPERATURE_HYSTERESIS);
          if (id(calibrated_temperature).state < (target - hysteresis)) {
            id(heater_switch).turn_on();
          } else if (id(calibrated_temperature).state > (target + hysteresis)) {
            id(heater_switch).turn_off();

  # 定時開始時間設定控制
  - platform: template
    name: "08_Timer Start Hour"
    id: timer_start_hour
    unit_of_measurement: "h"
    icon: "mdi:clock-start"
    min_value: 0
    max_value: 23
    step: 1
    initial_value: 16
    set_action:
      - lambda: |-
          ESP_LOGD("main", "Timer start hour set to %.0f", x);
          id(timer_start_hour).publish_state(x);

  # 定時結束時間設定控制
  - platform: template
    name: "09_Timer End Hour"
    id: timer_end_hour
    unit_of_measurement: "h"
    icon: "mdi:clock-end"
    min_value: 0
    max_value: 23
    step: 1
    initial_value: 22
    set_action:
      - lambda: |-
          ESP_LOGD("main", "Timer end hour set to %.0f", x);
          id(timer_end_hour).publish_state(x);

script:
  # 啟用定時模式的腳本
  - id: enable_timer_mode
    then:
      - logger.log: "Timer mode enabled."

  # 禁用定時模式的腳本
  - id: disable_timer_mode
    then:
      - logger.log: "Timer mode disabled."

  # 手動加熱開始的腳本
  - id: manual_heating_start
    then:
      - globals.set:
          id: heater_timer_remaining
          value: "3600"  # 加熱時間為 1 小時（3600 秒）
      - switch.turn_on: heater_switch
      - logger.log: "Manual heating started. Heater will turn off after 1 hour."

  # 手動加熱停止的腳本
  - id: manual_heating_stop
    then:
      - globals.set:
          id: heater_timer_remaining
          value: "0"
      - switch.turn_off: heater_switch
      - text_sensor.template.publish:
          id: heating_time_display
          state: "00:00"
      - logger.log: "Manual heating stopped."

interval:
  # 每 10 秒執行一次，用於處理手動加熱倒計時、自動溫度調整、以及定時模式控制加熱器的邏輯
  - interval: 10s
    then:
      - lambda: |-
          // 處理手動加熱倒計時
          if (id(heater_timer_remaining) > 0) {
            id(heater_timer_remaining) -= 10;
            if (id(heater_timer_remaining) <= 0) {
              id(heater_timer_remaining) = 0;
              id(manual_heater_switch).turn_off();
            }
          }

          // 檢查是否啟用了自動目標溫度調整
          if (id(auto_target_temp_adjust).state) {
            float env_temp = id(env_temperature).state;
            float new_target;
            if (env_temp <= 10.0) {
              new_target = 60.0;
            } else if (env_temp > 10.0 && env_temp <= 20.0) {
              new_target = 55.0;
            } else if (env_temp > 20.0 && env_temp <= 30.0) {
              new_target = 50.0;
            } else {
              new_target = 45.0;
            }

            if (id(target_temperature).state != new_target) {
              id(target_temperature).publish_state(new_target);
              ESP_LOGD("main", "Auto Adjust: Target temperature set to %.1f °C based on environment temperature %.1f °C", new_target, env_temp);
            }
          }

          // 處理定時模式下的加熱邏輯，應用滯後
          if (id(timer_mode_switch).state) {
            auto now = id(sntp_time).now();
            if (now.is_valid()) {
              int hour = now.hour;
              if (hour >= (int)id(timer_start_hour).state && hour < (int)id(timer_end_hour).state) {
                float target = id(target_temperature).state;
                float hysteresis = id(TEMPERATURE_HYSTERESIS);
                float current_temp = id(calibrated_temperature).state;
                if (current_temp < (target - hysteresis)) {
                  id(heater_switch).turn_on();
                } else if (current_temp > (target + hysteresis)) {
                  id(heater_switch).turn_off();
                }
              } else {
                id(heater_switch).turn_off();
              }
            }
          }

          // 處理手動加熱模式下的加熱邏輯，應用滯後
          if (id(manual_heater_switch).state) {
            float target = id(target_temperature).state;
            float hysteresis = id(TEMPERATURE_HYSTERESIS);
            float current_temp = id(calibrated_temperature).state;
            if (current_temp < (target - hysteresis)) {
              id(heater_switch).turn_on();
            } else if (current_temp > (target + hysteresis)) {
              id(heater_switch).turn_off();
            }
